generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider   = "postgresql"
  url        = env("DIRECT_URL")
}

// — NextAuth models —

model Account {
  id                        String   @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String?
  access_token              String?
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?
  session_state             String?
  refresh_token_expires_in  Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// — app models — 

model User {
  id             String            @id @default(cuid())
  name           String?
  email          String?           @unique
  emailVerified  DateTime?
  image          String?

  accounts       Account[]
  sessions       Session[]
  assignments    TaskAssignment[]   // join to tasks
}

model Task {
  id          String           @id @default(uuid())
  title       String
  description String?
  status      String           @default("todo")
  dueDate     DateTime?
  startDate   DateTime?
  endDate     DateTime?
  priority    Int              @default(1)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  assignments TaskAssignment[] // join to users
}

model TaskAssignment {
  taskId String
  userId String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([taskId, userId])
}
