// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ──────────────────────────────────────────────────
// NEXTAUTH.JS MODELS
// ──────────────────────────────────────────────────

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? // @db.Text
  access_token       String? // @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? // @db.Text
  session_state      String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]

  // Domain relations
  profile             Profile?
  projectMemberships  ProjectMember[]
  taskAssignments     TaskAssignment[]
}

// ──────────────────────────────────────────────────
// DOMAIN MODELS
// ──────────────────────────────────────────────────

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime        @default(now())

  members     ProjectMember[]
  tasks       Task[]
}

model ProjectMember {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  role      String  @default("member")

  @@id([userId, projectId])
}

model Task {
  id          String           @id @default(uuid())
  title       String
  description String?
  status      String           @default("todo")
  priority    Int              @default(3)
  dueDate     DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  project     Project          @relation(fields: [projectId], references: [id])
  projectId   String

  assignments TaskAssignment[]
}

model TaskAssignment {
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id([taskId, userId])
}
